:- oopl_include('./standard/hash.pl').
add(T, H, H) :- add(H, T).

make_fresh_field(Field, Dict, Dict) :- add(Dict, (Field, _)).

build_class(Type, C) :- build_class(Type, C, []).

build_class(Type, C, _) :-
	C = class(Type, Members),
	table_size(Type::'Name', Type::'Fields', N),
	hashtable(N, Members),
	foldl(make_fresh_field, Type::'Fields', Members, _),
	!.

table_size(classType, _, 8).
table_size(_, F, N) :- length(F, LF), N is LF * 3.

% Member is a field
::(O, Nm, Res) :- access_field(O, Nm, Res).
% Member is a predicate
::(O, Nm, Res) :- access_predicate(O, Nm, Res).
%For efficinecy if we can fix location at compile time we skip the hash
::(class(_,hashtable(_,Table)), Nm, Res, N) :- arg(N, Table, (Nm, Res)), !.
::(C, Nm, Res, _) :- ::(C, Nm, Res).

access_field(class(_,M), Nm, Res) :- lookup(M, (Nm, Res)).
access_predicate(O, Nm, Res) :- classof(O, C), access_field(C, 'Predicates', AllPreds), lookup(AllPreds, (Nm, P)), Res =.. [P, O].

object(class(_,_)).
classof(class(self,M), class(self,M)) :- !.
classof(class(T,_),T).

%WORKS FOR TABLE OF SIZE 8, only for the correct endieness (SWIPL sucks)
construct_classType(This, N, F, Pred, Par, Out, Cons) :- 
	::(This, 'Name', N, 3),
	::(This, 'Fields', F, 1),
	length(Pred, NP),
	Size is  NP * 3,
	hashtable(Size, Table),
	foldl(add, Pred, Table, _),
	::(This, 'Predicates', Table, 4),

	::(This, 'Parent', Par, 5), 
	::(This, 'Outer', Out, 2),
	::(This, 'Constructor', Cons, 7).


class_def__classType(T) :- nb_getval(classType, T).

class_def_construct_classType(
		class(	self,
				hashtable(8,
					table(	('Fields', ['Name', 'Fields', 'Predicates', 'Parent', 'Outer', 'Constructor']),
							('Outer', none),
							('Name',classType),
							('Predicates',hashtable(0,table)),
							('Parent', none),
							(_,_),
							('Constructor',construct_classType),
							(_,_)
						)
				)
			)
	).
	
:- class_def_construct_classType(T), nb_setval(classType, T).

/*
class classType.
	Name.
	Fields.
	Predicates.
	Parent.
	Outer.
	Constructor.
	classType(Name, Fields, Predicates, Parent, Outer, Constructor).

endclass.
*/

add_to_defined_names(NewNames) :-
	current_predicate(defined_names/1),
	defined_names(OldNames), !,
	union(NewNames, OldNames, Names),
	retract(defined_names(OldNames)),
	assert(defined_names(Names)).
add_to_defined_names(NewNames) :- assert(defined_names(NewNames)).