:- oopl_include('./compiler_ooprolog/parse.oopl').
:- ['../src/utils/utils.pl'].

% Represents a scope level, contains lot of meta data
class scope.
	Prefix.
	Names.
	Mods.
	Parent.
	Hdr.
	CS.
	Top.

	scope(Prefix, Names, Parent, Hdr, CS) :- Top = false.
	scope(Defs) :- new(class_header_token, Hdr, '', []), Parent = top, Top = true, new_scope(Defs, '', '').
	scope(Defs, Hdr, Parent) :- Top = false, new_scope(Defs, Hdr::'Name', Parent::'Prefix').

	% Gets a name from a definition
	get_name(class_def(Def), class(Def::'Hdr'::'Name')).
	get_name(fact(Def), pred(Def::'Name',Def::'N')) :- Def::'Name' \= ''.
	get_name(rule(Def), pred(Def::'Name',Def::'N')) :- Def::'Name' \= ''.
	get_name(field(Name), field(Name)).

	% Gets all the names defined at this scope
	get_defined_names([],[]).
	get_defined_names([D|Ds],[N|Ns]) :- get_name(D,N), !, get_defined_names(Ds, Ns).
	get_defined_names([_|Ds], Ns) :- get_defined_names(Ds, Ns).

	% Creates a new scope from a list of definitions //TODO: Pay attenton to no munge
	new_scope(Defs, Name, ParentPrefix) :-
		atomic_list_concat(['_', Name, ParentPrefix], Prefix),
		get_defined_names(Defs, Names),
		filter(This::new_class_scope, Defs, CS).

	new_class_scope(class_def(C), cs(C::'Hdr'::'Name', ClassScope)) :- new(scope, ClassScope, C::'Bdy', C::'Hdr', This).

	is_top :- Top = true.

	get_mods(P, M) :- member((P,M), Mods).
	% Save the top of the scope to the output for the interpreter

	dump(IO) :-
		write(IO::'Out', defined_names(Names)),
		write(IO::'Out', '.
		:- [''./interpret.pl''].
		:- interpret.
	').
	
endclass.

	%%%%%%%%%%%%
	% Compiler %
	%%%%%%%%%%%%

compile(In, Out, Extras, Opts) :- new(generator, G, Opts, In, Out, Extras), call(G::g_compile).

% An oopl file with name X, outputs it to X.out.pl
quick(X, Extras, Opts) :- atom_concat(X, '.oopl', X1), atom_concat(X, '.out.pl', X2), compile(X1, X2, Extras, Opts).
% With no extras
quick(X, Opts) :- quick(X,'',Opts).
% With no options
quick(X) :- quick(X, []).

% Compile with the standard heading and options
generic_compile(In, Out) :- generic_compile(In, Out, []).

% Compile with the standard heading
generic_compile(In, Out, Opts) :- compile(In, Out,
':- [''./standard.out.pl''].
', Opts).

quick_generic(In) :- atom_concat(In, '.oopl', X1), atom_concat(In, '.out.pl', X2), generic_compile(X1, X2).

class generator.
	Opts.
	TopScope.
	Extras.
	InFile.
	OutFile.
	IO.
	TNext.

	% Gets the next free variable in a chain
	next_tmp(T) :- arg(1, TNext, N), Ni is N+1, setarg(1, TNext, Ni), atom_concat('T', N, T).

	%Current options are: [no_munge, no_commas, no_interpret]
	generator(Opts, InFile, OutFile, Extras) :- TNext = cntr(0).

	%Compilation main entry point. Takes an in file, and an out file. Extras will be appended to the start. 

	g_compile :-
		open(InFile, read, InS),
		new(io, IO1, InS, user_output),
		new(parser, P, IO1),
		call(P::parse_until_eof, Defs), !,
		close(InS),
		open(OutFile, write, OutS),
		write_standard(OutS, Extras),
		new(io, IO, user_input, OutS),
		generate_defs_top(Defs), !,
		close(OutS).

	get_field_name(field(Name), Name).

	% Checks if a predicate is a constructor for the class defined at this scope
	is_constructor(Scope, pred(Name, N), pred(Name, N)):- Name \= '', Name = Scope::'Hdr'::'Name'.

	is_not_constructor(Scope, P, P) :- not(is_constructor(Scope, P, _)).

	% Creates a tuple of the original predicate, and its scoped name.
	pair_predicate(Scope, Name, (Name, Resolved)) :-
		make_predicate_name(Name, Scope, Resolved).

	%gets a field name and qoutes its
	get_field_name_qoute(X, Y) :- get_field_name(X, Y).

	%TODO allow more than one parent
	find_parents_definitions(_, [], [],[],[]).
	find_parents_definitions(Scope, [Parent], Fields, Predicates, SuperPreds) :-
		(lookup(Scope, class(Parent), PDefScope) ; throw_atoms(['Could not find a class of name ', Parent,'.'])),
		(scope_of(PDefScope, Parent, ParentScope) ; throw_atoms([Parent, ' is not a class.'])),
		find_class_definitions(ParentScope, ParentScope::'Hdr', Fields, Predicates, SuperPreds).

	make_super_call(CRes, PRes, N , L :- R) :- 
		tmp_lst(N, Ts),
		L =.. [CRes, 'This'|Ts],
		R =.. [PRes, 'This'|Ts].

	predicate_inherit([], TotalPairs, TotalPairs, []).
	predicate_inherit([(pred(CName,NC), CRes)|Ps], ParentPs, TotalPairs, [Sup|SuperPreds]) :- 
		member((pred(CName,NP), PRes), ParentPs),
		!,
		delete(ParentPs, (pred(CName,NP), PRes), ParentPsWO),
		make_super_call(CRes, PRes, NP, Sup),
		predicate_inherit([(pred(CName,NC), CRes)|Ps], ParentPsWO, TotalPairs, SuperPreds).
	predicate_inherit([(CName, CRes)|Ps], ParentPs, [(CName, CRes)|TotalPairs], SuperPreds) :-
		predicate_inherit(Ps, ParentPs, TotalPairs, SuperPreds).


	find_class_definitions(Scope, Hchild, Fields, Predicates, SuperPreds) :-
		filter(This::get_field_name_qoute,Scope::'Names',ThisFields),
		add_functor_args(This::is_not_constructor, [Scope], F),
		filter(F, Scope::'Names', Names2),
		add_functor_args(This::pair_predicate, [Scope], F2),
		filter(F2, Names2, ThisPredicates),
		find_parents_definitions(Scope, Hchild::'Parents', ParentFields, ParentPredicates, ParentSuperPreds),
		(intersection(ThisFields, ParentFields,[]) ; throw('Cannot redefine a parents field.')),  %Might allow redefinition, use union
		append(ParentFields, ThisFields, Fields),
		predicate_inherit(ThisPredicates, ParentPredicates, Predicates, ThisSuperPreds),
		append(ParentSuperPreds, ThisSuperPreds, SuperPreds).

	not_same_pred_name(Nm, (pred(Nm2,N), Res), (pred(Nm2,N), Res)) :- Nm \= Nm2.

	get_unique_predicates([],[]).
	get_unique_predicates([(pred(Nm,_),Res)|Ps], [(Nm,Res)|OPs]) :-
		add_functor_args(This::not_same_pred_name, [Nm], F),
		filter(F,Ps,FPs),
		get_unique_predicates(FPs, OPs).

	none_if_empty(_, [], none).
	none_if_empty(Scope, [X|_], Y) :- make_predicate_name(X, Scope, Y).

	% Generates the rule that constructs a class type
	make_class(Def, ScopeAbove, Scope, SuperPreds) :-
		find_class_definitions(Scope, Def::'Hdr', Fields, Predicates, SuperPreds),
		get_unique_predicates(Predicates, UPredicates),
		make_class_type_functor(Def::'Hdr'::'Name', ScopeAbove, Func),
		make_class_type_args(ScopeAbove, Args),
		add_functor_args(This::is_constructor, [Scope], F),
		filter(F, Scope::'Names', Constructors),
		none_if_empty(Scope, Constructors, Constructor),
		make_class_type_body(Def::'Hdr'::'Name', Fields, UPredicates, Bdy, Constructor),
		P =.. [Func | Args],
		write_standard(IO::'Out', (P :- Bdy)), write(IO::'Out', '.\n').

	% The name of a predicate after generation
	append_if_not_blank(Prefix, PredicateName, Result) :- Prefix \= '', atomic_list_concat(['p',Prefix, PredicateName], Result).
	append_if_not_blank('', PredicateName, PredicateName).

	make_predicate_name(pred('', _), _, '').
	make_predicate_name(pred(PredicateName, _), Scope, Result) :- PredicateName \= '', append_if_not_blank(Scope::'Prefix', PredicateName, Result).

	% The name of the rule for getting a classes type info
	make_class_type_functor(ClassName, Scope, Result) :- atomic_list_concat([class_def, Scope::'Prefix', ClassName], Result).
	% The compound the represents a class type 
	make_class_type_args(Scope, Bdy) :- add_this(['T'], Scope, Bdy).
	% Easier to just use new
	make_class_type_body(Name, Fields, Predicates, Bdy, Constructor) :- 
		maplist(add_qoutes, Fields, QFields),
		next_tmp(T),
		expand_new(new('X', 'T', Name, QFields, Predicates, none, none, Constructor), T, NewComs),
		list_to_comma_functor([class_def__classType('X') | NewComs], Bdy).

	expand_new(Command, Con, [build_class(Type, Class), ::(Type, Constructor, Con) , ((Con = none) ; Call)]) :- 
		Command =.. [new, Type, Class | Args],
		add_qoutes('Constructor', Constructor),
		Call =.. [call, Con, Class | Args].

	% Generates prolog from a single definition
	make_from_fact(Nm, ArgLst, [], Res) :- Res =.. [Nm|ArgLst].
	% FIXME this might not print properly
	make_from_fact(Nm, ArgLst, Commands, (P1 :- P2)) :- Commands \= [], P1 =.. [Nm|ArgLst], list_to_comma_functor(Commands, P2).

	% Recreates the top scope from given names	
	load_scope(Names, Scope) :- new(scope, Scope, '__', Names, top, top, []).

	% looks up a name to get its containing scope
	lookup(Scope, Arg, ScopeRes) :- lookup_nesting(Scope, Arg, ScopeRes), !.
	lookup(Scope, Arg, ScopeRes) :- lookup_parent(Scope, Arg, ScopeRes).

	lookup_here(Scope, Arg, Scope) :- member(Arg, Scope::'Names').
	lookup_nesting(Scope, Arg, Res) :- not(call(Scope::is_top)), lookup_nesting(Scope::'Parent', Arg, Res).
	lookup_nesting(Scope, Arg, Res) :- lookup_here(Scope, Arg, Res).
	lookup_parent(Scope, Arg, Res) :-
		not(call(Scope::is_top)),
		[P] = Scope::'Hdr'::'Parents',
		lookup(Scope, class(P), PDefScope),
		scope_of(PDefScope, P, PScope),
		lookup_parent(PScope, Arg, Res).
	lookup_parent(Scope, Arg, Res) :- lookup_here(Scope, Arg, Res).

	%trys to find a scope of a certain class
	scope_of(Scope, Pname, Scp) :- member(cs(Pname, Scp), Scope::'CS').

	%Walks the parse tree finding out names to create scope

	% Top level predicate for generating prolog
	generate_defs_top(Defs) :- new(scope, TopScope, Defs), generate_defs(Defs, TopScope), (member('no_interpret',Opts);call(TopScope::dump, IO)).

	% Generates prolog from a list of definitions
	generate_defs([Def|Defs], Scope) :- generate_def(Def, Scope), generate_defs(Defs, Scope).
	generate_defs([], _).

	% new is expanded into other predicates
	resolve_arg_new(Scope, Reps, RepsOut, compound(P), AllCommands) :-
		functor(P, new, _), !,
		next_tmp(Tmp),
		expand_new(P, tmp(Tmp), Commands),
		resolve_args(Scope, Reps, RepsOut, Commands, Commands1, Commands2, false),
		append(Commands2, Commands1, AllCommands).

	%We may already have a replacement
	resolve_arg(_,Reps, Reps, T, Td, [], _) :- member((T, Td), Reps), !.

	%Might be an infix operator that will need upwrapping
	resolve_arg(Scope, Reps, Reps3, compound(Z), Tmp, Cmds4, _) :-
		functor(Z, '::', 2),
		arg(1, Z, X),
		arg(2, Z, Y),
		!, 
		next_tmp(Tmp),
		resolve_arg(Scope, [(compound(Z),Tmp)|Reps], Reps2, X, Xd, Cmds1, false),
		resolve_arg(Scope, Reps2, Reps3, Y, Yd, Cmds2, false),
		append(Cmds1, Cmds2, Cmds3),
		append(Cmds3, [::(Xd,Yd,Tmp)], Cmds4).

	%Atoms might refer to a class/predicate
	resolve_arg(Scope, Reps, Reps, atom(X), P, [], true) :-
		lookup(Scope, pred(X, 0), PredScope), !,
		make_predicate_name(pred(X, 0), PredScope, Nm),
		add_this([], PredScope, Args),
		P =.. [Nm|Args].

	resolve_arg(Scope, Reps, [(atom(X),Tmp)|Reps], atom(X), Tmp, [C], _) :-
		lookup(Scope, class(X), DefScp),!,
		next_tmp(Tmp),
		make_class_type_functor(X, DefScp, F),
		add_this([Tmp], DefScp, Ls),
		C =.. [F|Ls].

	resolve_arg(_, R, R, atom(X), Y, [], _) :- !, add_qoutes(X, Y).

	%Variables might be members
	resolve_arg(Scope, Reps, [(var(Arg),Tmp)|Reps], var(Arg), Tmp, [::('This', ArgQ, Tmp)], _) :-
		lookup(Scope, field(Arg), _), !,
		add_qoutes(Arg, ArgQ),
		next_tmp(Tmp).

	resolve_arg(_, R, R, var(Arg), Arg, [], _) :- !.

	% Tmps will never mean anything else in context
	resolve_arg(_, R, R, tmp(Arg), Arg, [], _) :- !.

	% might need to add a prefix and/or 'This' 
	resolve_arg(Scope, Reps, RepsOut, compound(P), Pd, Commands, true) :- 
		P =.. [Nm|Args],
		length(Args, N),
		(lookup(Scope, pred(Nm, N), PredScope)), !,
		(is_not_constructor(PredScope, pred(Nm, N), _) ; throw('Cannot directly call a constructor.')),
		make_predicate_name(pred(Nm, N), PredScope, NewName),
		resolve_args(Scope, Reps, RepsOut, Args, Args2, Commands, false),
		add_this(Args2, PredScope, Args3),
		Pd =.. [NewName|Args3].

	% This is the case where we have a compound we cant lookup, 
	% FIXME, replace with access/call for correct semantics
	resolve_arg(Scope, Reps, RepsOut, compound(P), Pd, Commands, Chge) :-
		P =.. [Nm|Args],
		contin_change(Nm, Chge, Chge2),
		resolve_args(Scope, Reps, RepsOut, Args, Argsd, Commands, Chge2),
		Pd =.. [Nm|Argsd].

	% FIXME this is a hack 
	resolve_arg(Scope, Reps, RepsOut, P, Pd, Commands, Chge) :-
		functor(P, Nm, _),
		Nm \= 'compound',
		resolve_arg(Scope, Reps, RepsOut, compound(P), Pd, Commands, Chge).

	resolve_args(Scope, Reps, RepsOut2, [Arg|Args],[NewArg|NewArgs],AllCommands, Chge) :-
		resolve_arg(Scope, Reps, RepsOut, Arg, NewArg, Commands, Chge),
		resolve_args(Scope, RepsOut, RepsOut2, Args, NewArgs, Commands2, Chge),
		append(Commands, Commands2, AllCommands).

	resolve_args(_, R, R,[],[],[],_).

	goal_funcs([',',';','not']).

	contin_change(_, false, false).
	contin_change(Nm, true, true) :- goal_funcs(L), member(Nm, L).
	contin_change(Nm, true, false) :- goal_funcs(L), not(member(Nm, L)).

	resolve_args_comma_functor(compound(B), Scope, Reps, RepsOut2, Res) :-
		functor(B, ',', _), !,
		arg(1, B, Arg), arg(2, B, Bdy),
		((	
			resolve_arg_new(Scope, Reps, RepsOut, Arg, CommandsNew), !,
			append(CommandsNew, Res1, Res)
		);(
			resolve_arg(Scope, Reps, RepsOut, Arg, NewArg, Commands1, true),
			append(Commands1, [NewArg|Res1], Res)
		)),
		resolve_args_comma_functor(Bdy, Scope, RepsOut, RepsOut2, Res1).

	resolve_args_comma_functor(B, Scope, Reps, RepsOut, Res) :-
		functor(B, Nm, _),
		(Nm \= ','),
		((
			resolve_arg_new(Scope, Reps, RepsOut, B, Res), !
		);(
			resolve_arg(Scope, Reps, RepsOut, B, Bd, Commands, true),
			append(Commands, [Bd], Res)
		)).

	%add_this(Rule, Ls, _, Ls) :- member('static', Rule::'Mods'), !.
	add_this(Ls, Scope, Ls) :- call(Scope::is_top).
	add_this(Ls, Scope, ['This'|Ls]) :- not(call(Scope::is_top)).

	generate_def(fact(FT), Scope) :-
		FT::'Left' =.. [Nm|ArgLstIn],
		resolve_args(Scope, [], _, ArgLstIn, ArgLst, Commands, false),
		make_predicate_name(pred(Nm, FT::'N'), Scope, NewName),
		add_this(ArgLst, Scope, ArgLst2),
		make_from_fact(NewName, ArgLst2, Commands, Res),
		write_standard(IO::'Out', Res), write(IO::'Out', '.\n').

	%FIXME, we can look through all the replacements to work out if we need this
	generate_def(rule(RT), Scope) :- 
		RT::'Left' =.. [Nm|ArgLstIn],
		resolve_args(Scope, [], OutReps, ArgLstIn, ArgLst, Commands, false),
		resolve_args_comma_functor(RT::'Right', Scope, OutReps, _, Res),
		append(Commands, Res, Body),
		make_predicate_name(pred(Nm, RT::'N'), Scope, NewName),
		add_this(ArgLst, Scope, ArgLst2),
		Pd =.. [NewName | ArgLst2],
		list_to_comma_functor(Body, CBdy),
		write_standard(IO::'Out', (Pd :- CBdy)), write(IO::'Out', '.\n').

	generate_def(class_def(C), Scope) :-
		scope_of(Scope, C::'Hdr'::'Name', NewScope),
		make_class(C, Scope, NewScope, Supers),
		generate_defs(C::'Bdy', NewScope),
		write_list(IO::'Out', Supers).

	%Fields don't generate anything
	generate_def(field(Nm), Scope) :- not(call(Scope::is_top)); compile_exception(['Field \'', Nm, '\' defined outside of a class.']).

	%Todo: get some line number action
	compile_exception(Ms) :- throw_atoms(Ms).
endclass.